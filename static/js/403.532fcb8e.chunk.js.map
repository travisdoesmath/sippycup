{"version":3,"file":"static/js/403.532fcb8e.chunk.js","mappings":"gPACIA,EACAC,EAAKC,EAAeC,E,6BAOxB,SAASC,IAOL,OANAJ,EAAQK,UAAU,sFAKRL,EAAQM,QAAQC,IAAI,OAAOC,OAC1BC,KAAK,GACpB,CAEA,SAASC,IAA4D,IAA9CC,EAAc,UAAD,6CAAC,MAAOC,EAAM,UAAD,6CAAC,IACxCC,GADoD,UAAD,iCAACC,KAC1C,CACZ,kBAAmB,OACnB,eAAkBH,EAClB,UAAaC,IAEbG,EAAId,EAAID,EAAQgB,KAAKH,GAAUI,GAAgBT,OAC/CU,EAAWH,EAAEI,WACjBC,QAAQC,IAAI,uCAAwCH,GAGpDA,GADAA,GADAA,EAAWA,EAASI,YACAC,MAAM,EAAGL,EAASM,OAAO,IACzBC,QAAQ,2CAAD,iBAAuDrB,IAAQ,aAC1F,IAAMsB,EAAc,IAAIC,YAGxB,OAFAP,QAAQC,IAAIH,GACZE,QAAQC,IAAI,sBAAuBK,EAAYE,OAAOV,IAC/C,CACHW,MACA,CACIC,KAAMJ,EAAYE,OAAOV,GACzBf,QAASA,EACT4B,OAAQ7B,GAEZ8B,OAAO,kBAAD,OAAqBC,IAAS,cAAMtB,EAAa,YAAIC,EAAK,sBAAcV,EAAa,QAEnG,CAIA,SAAS+B,IACL,IAAMC,EAAgB,IAAIC,KAAKC,eAAe,QAAS,CACnDC,IAAK,UACLC,MAAO,QACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,UACRC,OAAQ,YAGRC,EAAM,IAAIC,KACVC,EAAY,CAAC,EAEjB,OADAX,EAAcY,cAAcH,GAAKI,KAAI,SAAAC,GAAC,OAAIH,EAAUG,EAAEC,MAAQD,EAAEnB,KAAK,IAC/D,GAAN,OAAUgB,EAAUR,IAAG,YAAIQ,EAAUP,MAAK,YAAIO,EAAUN,KAAI,YAAIM,EAAUL,KAAI,YAAIK,EAAUJ,OAAM,YAAII,EAAUH,OACpH,CAAC,SAEcQ,EAAK,GAAD,4CAMlB,OANkB,0BAAnB,WAAoBC,GAAG,sEACnBnD,EAAQK,UAAU8C,GAElBlD,EAAMD,EAAQM,QAAQC,IAAI,OAAOC,OAEjCM,KAAKsC,YAAY,CAAC,QAAU,aAAY,4CAC3C,sBAED,SAASnC,EAAec,EAAQsB,EAAiBC,GAC7CpD,EAAgB6B,EAChB,IAAIwB,EAAgB,CAAC,EACrBF,EAAgB7C,OAAOgD,SAAQ,+BAAEC,EAAG,KAAE5B,EAAK,YAAM0B,EAAcE,GAAO5B,CAAK,IAC3E1B,EAAUoD,CACd,CAEO,SAAeG,EAAQ,EAAD,kCAE5B,8CAFM,WAAuBC,EAAQ/C,GAAK,+FAChCF,EAAciD,EAAQ/C,IAAM,4CACtC,sBAEM,SAAegD,EAAI,GAAD,+BAIxB,8CAJM,WAAmBT,GAAG,sFACnBD,EAAKC,GAAI,OACD,qKACG,4CACpB,sBAEM,SAAeU,IAAK,+BAkB1B,8CAlBM,yGAGaC,YAAY,CAAE9B,OAAQ,SAAC+B,GACnCC,EAASD,CACb,IAAI,KAAD,EAMJ,OARC/D,EAAO,QAICK,UAAU,wCAInB,SAEOL,EAAQiE,YAAY,YACrBC,MAAK,kBAAMlE,EAAQmE,SAAS,WAAW,IACvCD,MAAK,SAAAE,GAAQ,OAAIA,EAASC,QAAQ,QAAQ,IAAE,KAAD,2BAEzCL,GAAM,4CAChB,sBAEM,SAAeM,EAAW,EAAD,kCAM/B,8CANM,WAA0BC,EAAUC,GAAO,4EACxCrB,EAAI,0BAAD,OACUoB,EAAQ,+CACXC,EAAO,UAEvBxE,EAAQK,UAAU8C,GAAI,4CACzB,sBA9GG,oBAAsBsB,eAEtBA,cAAc,4D","sources":["sippycup.js"],"sourcesContent":["/* eslint-disable no-restricted-globals */\nlet pyodide;\nlet app, requestStatus, headers;\n\nif ('function' === typeof(importScripts)) {\n    // eslint-disable-next-line no-undef\n    importScripts(\"https://cdn.jsdelivr.net/pyodide//v0.21.3/full/pyodide.js\");\n}\n\nfunction getCss() {\n    pyodide.runPython(`\nwith open(\"templates/style.css\", \"r\") as file:\n    css = file.readlines()    \n`\n    )\n    let css = pyodide.globals.get(\"css\").toJs();\n    return css.join('')\n}\n\nfunction handleRequest(requestMethod=\"GET\", route=\"/\", target=self) {\n    const environ = {\n        'wsgi.url_scheme': 'http',\n        'REQUEST_METHOD': requestMethod,\n        'PATH_INFO': route\n    }\n    let r = app(pyodide.toPy(environ), start_response).toJs()\n    let response = r.__next__()\n    console.log('response before converting to string', response)\n    response = response.toString()\n    response = response.slice(2, response.length-1)\n    response = response.replace(`<link rel=\"stylesheet\" href=\"style.css\">`, `<style>${getCss()}</style>`)\n    const textEncoder = new TextEncoder();\n    console.log(response)\n    console.log('sippycup response: ', textEncoder.encode(response))\n    return {\n        value:\n        {\n            body: textEncoder.encode(response),\n            headers: headers,\n            status: requestStatus\n        },\n        stdout:  `127.0.0.1 - - [${logDate()}] \"${requestMethod} ${route} HTTP/1.1\" ${requestStatus} -\\n`\n    }\n}\n\n\n\nfunction logDate() {\n    const logDateFormat = new Intl.DateTimeFormat('en-US', {\n        day: '2-digit',\n        month: 'short',\n        year: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n    })\n\n    let now = new Date()\n    let dateParts = {}\n    logDateFormat.formatToParts(now).map(x => dateParts[x.type] = x.value)\n    return `${dateParts.day}/${dateParts.month}/${dateParts.year} ${dateParts.hour}:${dateParts.minute}:${dateParts.second}`\n}\n\nasync function main(src) {\n    pyodide.runPython(src)\n\n    app = pyodide.globals.get(\"app\").toJs();\n\n    self.postMessage({'command':'appReady'})\n}\n\nfunction start_response(status, responseHeaders, exc_info) {   \n    requestStatus = status\n    let headersObject = {}\n    responseHeaders.toJs().forEach(([key, value]) => headersObject[key] = value)\n    headers = headersObject\n}\n\nexport async function request(method, route) {\n    return handleRequest(method, route)\n}\n\nexport async function run(src) {\n    await main(src)\n        let stdout = `\\n * Serving Flask app 'app'\\n * Running on http://127.0.0.1:5000\\n`\n        return stdout\n}\n\nexport async function start() {\n    let output\n    // eslint-disable-next-line no-undef\n    pyodide = await loadPyodide({ stdout: (_output) => {\n        output = _output\n    }});\n\n    pyodide.runPython(\n`import os\n\nos.mkdir('templates')\n`);\n        \n    await pyodide.loadPackage(\"micropip\")\n        .then(() => pyodide.pyimport(\"micropip\"))\n        .then(micropip => micropip.install('flask'));\n\n    return output\n}\n\nexport async function updateFile(filename, content) {\n    const src=`\nwith open(\"templates/${filename}\", \"w\") as file:\n    file.write(\"\"\"${content}\"\"\")\n`\n    pyodide.runPython(src)\n}\n\n\n\n"],"names":["pyodide","app","requestStatus","headers","getCss","runPython","globals","get","toJs","join","handleRequest","requestMethod","route","environ","self","r","toPy","start_response","response","__next__","console","log","toString","slice","length","replace","textEncoder","TextEncoder","encode","value","body","status","stdout","logDate","logDateFormat","Intl","DateTimeFormat","day","month","year","hour","minute","second","now","Date","dateParts","formatToParts","map","x","type","main","src","postMessage","responseHeaders","exc_info","headersObject","forEach","key","request","method","run","start","loadPyodide","_output","output","loadPackage","then","pyimport","micropip","install","updateFile","filename","content","importScripts"],"sourceRoot":""}